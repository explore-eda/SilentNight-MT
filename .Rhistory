# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
print('hey')
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
# else {
#   print('hey')
#   matching_period <- NA
# }
}
}
matching_periods[i] <- matching_period
}
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
matching_period <- NA
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
# else {
#   print('hey')
#   matching_period <- NA
# }
}
}
matching_periods[i] <- matching_period
}
print(matching_periods)
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
matching_period <- NA
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
print(start_date)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
# else {
#   print('hey')
#   matching_period <- NA
# }
}
}
matching_periods[i] <- matching_period
}
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
matching_period <- NA
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j]
# if (date_to_check > start_date) {
#   matching_period <- adsl$APNAME[j+1]
#   start_date <- adsl$APDATE[j+2]
#   print(start_date)
#   if (date_to_check > start_date) {
#     matching_period <- adsl$APNAME[j+2]
#
#   }
# }
# else {
#   print('hey')
#   matching_period <- NA
# }
}
}
matching_periods[i] <- matching_period
}
print(matching_periods)
sdtm$APNAME <- matching_periods
print(sdtm)
matching_periods <- NA
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
matching_period <- NA
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
}
}
matching_periods[i] <- matching_period
}
print(matching_periods)
sdtm$APNAME <- matching_periods
# Print the result
print(sdtm)
pwd
setwd("~/Desktop/EDA CLINCAL/MockTrial/SilentNight-MT")
# Read the excel
TS <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1) %>%
rename(type = "Data Type") %>%
set_names(tolower)
# Read the excel
TS <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1) %>%
rename(type = "Data Type") %>%
set_names(tolower)
# Load the package
library(readxl)
# Read the excel
TS <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1) %>%
rename(type = "Data Type") %>%
set_names(tolower)
# Read the excel
TS <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1)
# Create variable level metadata dataframe
vlm <- tribble(
~dataset, ~variable, ~label, ~type, ~format,
'ts', 'STUDYID', 'Study Identifier', 'character', NA_character_,
'ts', 'USUBJID', 'Unique Subject Identifier', 'character', NA_character_,
'adsl', 'SUBJID', 'Subject Identifier for the Study', 'character', NA_character_,
'adsl', 'SITEID', 'Study Site Identifier', 'character', NA_character_,
'adsl', 'AGE', 'Age', 'numeric', NA_character_,
'adsl', 'AGEU', 'Age Units', 'character', NA_character_,
'adsl', 'AGEGR1', 'Pooled Age Group 1', 'character', NA_character_,
'adsl', 'AGEGR1N', 'Pooled Age Group 1 (N)', 'numeric', NA_character_,
'adsl', 'SEX', 'Sex', 'character', NA_character_,
'adsl', 'RACE', 'Race', 'character', NA_character_,
'adsl', 'RACEN', 'Race (N)', 'numeric', NA_character_,
'adsl', 'ETHNIC', 'Ethnicity', 'character', NA_character_,
'adsl', 'SAFFL', 'Safety Population Flag', 'character', NA_character_,
'adsl', 'ITTFL', 'Intent-To-Treat Population Flag', 'character', NA_character_,
'adsl', 'SCRNFL', 'Screen Failure Population Flag', 'character', NA_character_,
'adsl', 'ARM', 'Description of Planned Arm', 'character', NA_character_,
'adsl', 'ACTARM', 'Description of Actual Arm', 'character', NA_character_,
'adsl', 'TRT01P', 'Planned Treatment for Period 01', 'character', NA_character_,
'adsl', 'TRT01PN', 'Planned Treatment for Period 01 (N)', 'numeric', NA_character_,
'adsl', 'TRT01A', 'Actual Treatment for Period 01', 'character', NA_character_,
'adsl', 'TRT01AN', 'Actual Treatment for Period 01 (N)', 'numeric', NA_character_,
'adsl', 'DOSE01A', 'Actual Treatment Dose for Period 01', 'numeric', NA_character_,
'adsl', 'DOSE01U', 'Units for Dose for Period 01', 'character', NA_character_,
'adsl', 'TRTSDT', 'Date of First Exposure to Treatment', 'Date', "DATE9.",
'adsl', 'TRTEDT', 'Date of Last Exposure to Treatment', 'Date', "DATE9.",
'adsl', 'TRTDURD', 'Total Treatment Duration (Days)', 'numeric', NA_character_,
'adsl', 'EOSSTT', 'End of Study Status', 'character', NA_character_,
'adsl', 'DCSREAS', 'Reason for Discontinuation from Study', 'character', NA_character_,
'adsl', 'DCSREASP', 'Reason Spec for Discont from Study', 'character', NA_character_,
'adsl', 'DTHDT', 'Date of Death', 'Date', "DATE9.",
'adsl', 'WEIGHTBL', 'Weight (kg) at Baseline', 'numeric', NA_character_,
'adsl', 'HEIGHTBL', 'Height (cm) at Baseline', 'numeric', NA_character_,
'adsl', 'BMIBL', 'Body Mass Index (kg/m2) at Baseline ', 'numeric', NA_character_,
'adsl', 'BMIGR1', 'Pooled BMI Group 1', 'character', NA_character_
)
# Create dataset level metadata dataframe
ts_dlm <- tribble(
~dataset, ~label,
"ts",   "Trial Summary"
)
library(tidyverse)
# Create variable level metadata dataframe
vlm <- tribble(
~dataset, ~variable, ~label, ~type, ~format,
'ts', 'STUDYID', 'Study Identifier', 'character', NA_character_,
'ts', 'USUBJID', 'Unique Subject Identifier', 'character', NA_character_,
'ts', 'SUBJID', 'Subject Identifier for the Study', 'character', NA_character_,
'ts', 'SITEID', 'Study Site Identifier', 'character', NA_character_,
'ts', 'AGE', 'Age', 'numeric', NA_character_,
'ts', 'AGEU', 'Age Units', 'character', NA_character_,
'ts', 'AGEGR1', 'Pooled Age Group 1', 'character', NA_character_,
)
View(TS)
# Create variable level metadata dataframe
vlm <- tribble(
~dataset, ~variable, ~label, ~type, ~format,
'ts', 'STUDYID', 'Study Identifier', 'character', NA_character_,
'ts', 'DOMAIN', 'Domain Abbreviation', 'character', NA_character_,
'ts', 'TSSEQ', 'Sequence Number', 'numeric', NA_character_,
'ts', 'TSGRPID', 'Group ID', 'character', NA_character_,
'ts', 'TSPARMCD', 'Trial Summary Parameter Short Name', 'character', NA_character_,
'ts', 'TSPARM', 'Trial Summary Parameter', 'character', NA_character_,
'ts', 'TSVAL', 'Parameter Value', 'character', NA_character_,
'ts', 'TSVALCD', 'Parameter Value Code', 'character', NA_character_,
'ts', 'TSVCDREF', 'Name of the Reference Terminology', 'character', NA_character_,
'ts', 'TSVCDVER', 'Version of the Reference Terminology', 'character', NA_character_,
)
# Create dataset level metadata dataframe
ts_dlm <- tribble(
~dataset, ~label,
"ts",   "Trial Summary"
)
xTS <- TS %>%
select()
xTS <- TS %>%
select()
xTS <- TS %>%
select(STUDYID, DOMAIN, TSSEQ, TSGRPID, TSPARMCD, TSPARM, TSVAL, TSVALCD, TSVCDREF, TSVCDVER)
xTS <- TS %>%
select(STUDYID, DOMAIN, TSSEQ, TSGRPID, TSPARMCD,
TSPARM, TSVAL, TSVALCD, TSVCDREF, TSVCDVER) %>%
# Apply dataframe label
xportr_df_label(dlm, domain = "ts") %>%
# Apply variable labels
xportr_label(vlm, domain = "ts") %>%
# Apply variable types
xportr_type(vlm, domain = "ts") %>%
# Apply variable formats
xportr_format(vlm, domain = "ts") %>%
# Change any numeric NAs to empty strings ("")
mutate(across(where(is.character), ~replace(., is.na(.), "")))
library(readxl)
library(xportr)
library(tidyverse)
install.packages("xportr")
install.packages("xportr")
# Load the package
library(readxl)
library(xportr)
library(tidyverse)
# Clean up environment - remove all objects
rm(list=ls())
# Read the excel
TS <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1)
# Create dataset level metadata dataframe
ts_dlm <- tribble(
~dataset, ~label,
"ts",   "Trial Summary"
)
# Create variable level metadata dataframe
vlm <- tribble(
~dataset, ~variable, ~label, ~type, ~format,
'ts', 'STUDYID', 'Study Identifier', 'character', NA_character_,
'ts', 'DOMAIN', 'Domain Abbreviation', 'character', NA_character_,
'ts', 'TSSEQ', 'Sequence Number', 'numeric', NA_character_,
'ts', 'TSGRPID', 'Group ID', 'character', NA_character_,
'ts', 'TSPARMCD', 'Trial Summary Parameter Short Name', 'character', NA_character_,
'ts', 'TSPARM', 'Trial Summary Parameter', 'character', NA_character_,
'ts', 'TSVAL', 'Parameter Value', 'character', NA_character_,
'ts', 'TSVALCD', 'Parameter Value Code', 'character', NA_character_,
'ts', 'TSVCDREF', 'Name of the Reference Terminology', 'character', NA_character_,
'ts', 'TSVCDVER', 'Version of the Reference Terminology', 'character', NA_character_,
)
xTS <- TS %>%
select(STUDYID, DOMAIN, TSSEQ, TSGRPID, TSPARMCD,
TSPARM, TSVAL, TSVALCD, TSVCDREF, TSVCDVER) %>%
# Apply dataframe label
xportr_df_label(dlm, domain = "ts") %>%
# Apply variable labels
xportr_label(vlm, domain = "ts") %>%
# Apply variable types
xportr_type(vlm, domain = "ts") %>%
# Apply variable formats
xportr_format(vlm, domain = "ts") %>%
# Change any numeric NAs to empty strings ("")
mutate(across(where(is.character), ~replace(., is.na(.), "")))
xTS <- TS %>%
select(STUDYID, DOMAIN, TSSEQ, TSGRPID, TSPARMCD,
TSPARM, TSVAL, TSVALCD, TSVCDREF, TSVCDVER) %>%
# Apply dataframe label
xportr_df_label(ts_dlm, domain = "ts") %>%
# Apply variable labels
xportr_label(vlm, domain = "ts") %>%
# Apply variable types
xportr_type(vlm, domain = "ts") %>%
# Apply variable formats
xportr_format(vlm, domain = "ts") %>%
# Change any numeric NAs to empty strings ("")
mutate(across(where(is.character), ~replace(., is.na(.), "")))
View(xTS)
#Check dataframe label
attr(xTS, "label")
# Check metadata
xTS %>%
contents()
library(dplyr)
# Check metadata
xTS %>%
contents()
library(tibble)
# Check metadata
xTS %>%
contents()
# Clean up environment - remove all objects
rm(list=ls())
library(readxl)
library(xportr)
library(tidyverse)
library(tibble)
# Read the excel
TS <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1)
# Create dataset level metadata dataframe
ts_dlm <- tribble(
~dataset, ~label,
"ts",   "Trial Summary"
)
# Create variable level metadata dataframe
vlm <- tribble(
~dataset, ~variable, ~label, ~type, ~format,
'ts', 'STUDYID', 'Study Identifier', 'character', NA_character_,
'ts', 'DOMAIN', 'Domain Abbreviation', 'character', NA_character_,
'ts', 'TSSEQ', 'Sequence Number', 'numeric', NA_character_,
'ts', 'TSGRPID', 'Group ID', 'character', NA_character_,
'ts', 'TSPARMCD', 'Trial Summary Parameter Short Name', 'character', NA_character_,
'ts', 'TSPARM', 'Trial Summary Parameter', 'character', NA_character_,
'ts', 'TSVAL', 'Parameter Value', 'character', NA_character_,
'ts', 'TSVALCD', 'Parameter Value Code', 'character', NA_character_,
'ts', 'TSVCDREF', 'Name of the Reference Terminology', 'character', NA_character_,
'ts', 'TSVCDVER', 'Version of the Reference Terminology', 'character', NA_character_,
)
xTS <- TS %>%
select(STUDYID, DOMAIN, TSSEQ, TSGRPID, TSPARMCD,
TSPARM, TSVAL, TSVALCD, TSVCDREF, TSVCDVER) %>%
# Apply dataframe label
xportr_df_label(ts_dlm, domain = "ts") %>%
# Apply variable labels
xportr_label(vlm, domain = "ts") %>%
# Apply variable types
xportr_type(vlm, domain = "ts") %>%
# Apply variable formats
xportr_format(vlm, domain = "ts") %>%
# Change any numeric NAs to empty strings ("")
mutate(across(where(is.character), ~replace(., is.na(.), "")))
#Check dataframe label
attr(xTS, "label")
# Check metadata
xTS %>%
contents()
library(lubridate)
# Check metadata
xTS %>%
contents()
# Function to check dataframe metadata
contents <- function(dat) {
# Define a function to give the contents of a row
row_contents <- function(m, dat) {
# Pull out the column
var <- dat[[m]]
# Make a data frame of the content of interest
as.data.frame(
list(
# Variable name was passed in as a string
Variable = m,
# Variable class
Class =  class(var),
# Label
Label = ifelse(is.null(attr(var, 'label')), '', attr(var, 'label')),
#Format
Format = ifelse(is.null(attr(var, 'SASformat')), '', attr(var, 'SASformat'))
)
)
}
# Map the function over all contents and build a data.frame
purrr::map_dfr(names(dat), row_contents, dat=dat)
}
# Check metadata
xTS %>%
contents()
# Output to specified path
xportr_write(adsl, "dev/output/ts.xpt")
# Output to specified path
xportr_write(ts, "dev/output/ts.xpt")
# Output to specified path
xportr_write(xTS, "dev/output/ts.xpt")
rlang::last_trace()
# Output to specified path
xportr_write(xTS, "dev/output/ts.xpt")
