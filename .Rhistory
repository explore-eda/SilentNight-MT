start_date <- adsl$APDATE[j]
#if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
}
else {
matching_period <- NA
}
matching_periods[i] <- matching_period
}
)
print(matching_periods)
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
#start_date <- adsl$APDATE[1]
#if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
}
}
else {
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
#start_date <- adsl$APDATE[1]
#if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
#start_date <- adsl$APDATE[1]
#if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
#start_date <- adsl$APDATE[1]
#if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
#start_date <- adsl$APDATE[1]
#if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
print(matching_periods)
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
else {
print('hey')
matching_period <- NA
}
}
}
matching_periods[i] <- matching_period
}
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
# else {
#   print('hey')
#   matching_period <- NA
# }
}
}
matching_periods[i] <- matching_period
}
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
matching_period <- NA
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
# else {
#   print('hey')
#   matching_period <- NA
# }
}
}
matching_periods[i] <- matching_period
}
print(matching_periods)
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
matching_period <- NA
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j+1]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+1]
start_date <- adsl$APDATE[j+2]
print(start_date)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j+2]
}
}
# else {
#   print('hey')
#   matching_period <- NA
# }
}
}
matching_periods[i] <- matching_period
}
matching_periods <- NA
# Loop through each date in sdtm
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
matching_period <- NA
# start_date <- adsl$APDATE[1]
# if statements could be changed to for i
# for (j in 1:nrow(adsl)){
#  start_date <- adsl$APDATE[j]
#   if (date_to_check > start_date) {
#     cat(date_to_check, start_date)
#     matching_period <- adsl$APNAME[j+i-1]
#     start_date <- adsl$APDATE[j+i]}}
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
#cat(start_date, date_to_check)
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
start_date <- adsl$APDATE[j]
# if (date_to_check > start_date) {
#   matching_period <- adsl$APNAME[j+1]
#   start_date <- adsl$APDATE[j+2]
#   print(start_date)
#   if (date_to_check > start_date) {
#     matching_period <- adsl$APNAME[j+2]
#
#   }
# }
# else {
#   print('hey')
#   matching_period <- NA
# }
}
}
matching_periods[i] <- matching_period
}
print(matching_periods)
sdtm$APNAME <- matching_periods
print(sdtm)
matching_periods <- NA
for (i in 1:nrow(sdtm)) {
date_to_check <- sdtm$STDTC[i]
matching_period <- NA
for (j in 1:nrow(adsl)){
start_date <- adsl$APDATE[j]
if (date_to_check > start_date) {
matching_period <- adsl$APNAME[j]
}
}
matching_periods[i] <- matching_period
}
print(matching_periods)
sdtm$APNAME <- matching_periods
# Print the result
print(sdtm)
setwd("~/Desktop/EDA CLINCAL/MockTrial/SilentNight-MT")
# Set Main file as Working Directory
install.packages("readxl")
# Read the excel
data <- read_xlsx("data/Trial Design Domains.xlsx")
# Load the package
library(readxl)
# Read the excel
data <- read_xlsx("data/Trial Design Domains.xlsx")
View(data)
# Read the excel
data <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1)
View(data)
data1 <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 2)
View(data1)
# Read the excel
TS<- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1)
# Read the excel
TS<- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1)
TE <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 2)
View(TE)
View(TE)
install.packages("xportr")
library(xportr)
# Read the excel
TS <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1, setNames(tolower))
# Read the excel
TS <- read_xlsx("data/Trial Design Domains.xlsx", sheet = 1, set_names(tolower))
var_spec <- read_xlsx(
system.file(paste0("specs/", "ADaM_admiral_spec.xlsx"), package = "xportr"),
sheet = "Variables"
) %>%
rename(type = "Data Type") %>%
set_names(tolower)
# Loading packages
library(dplyr)
library(labelled)
install.packages(dplyr, dplyr)
install.packages(c('dplyr', 'labelled', 'xportr', 'admiral', 'rlang', 'readxl'))
install.packages(c("dplyr", "labelled", "xportr", "admiral", "rlang", "readxl"))
# Loading packages
library(dplyr)
library(labelled)
library(xportr)
library(admiral)
library(rlang)
library(readxl)
# Loading in our example data
adsl <- admiral_adsl
View(adsl)
var_spec <- read_xlsx(
system.file(paste0("specs/", "ADaM_admiral_spec.xlsx"), package = "xportr"),
sheet = "Variables"
) %>%
rename(type = "Data Type") %>%
set_names(tolower)
View(var_spec)
install.packages(tidyverse)
install.packages('tidyverse')
# Clean up environment - remove all objects
rm(list=ls())
